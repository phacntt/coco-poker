{"version":3,"sources":["file:///Users/apple/Documents/Dads/coco-poker/node_modules/asynckit/lib/iterate.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","async","abort","iterate","list","iterator","state","callback","key","index","jobs","runJob","error","output","results","item","aborter","length","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;;8BAEHA,Y,GAAe,cAAYE,G;;AACjCJ,MAAAA,UAAU,CAACK,MAAX,CAAkBH,YAAlB,EAAgC,UAAUI,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,KAAK,GAAGJ,OAAO,CAAC,YAAD,CAAnB;AAAA,YACIK,KAAK,GAAGL,OAAO,CAAC,YAAD,CADnB,CAJ0F,CAQ1F;;;AACAC,QAAAA,MAAM,CAACF,OAAP,GAAiBO,OAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,iBAASA,OAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,KAAjC,EAAwCC,QAAxC,EACA;AACE;AACA,cAAIC,GAAG,GAAGF,KAAK,CAAC,WAAD,CAAL,GAAqBA,KAAK,CAAC,WAAD,CAAL,CAAmBA,KAAK,CAACG,KAAzB,CAArB,GAAuDH,KAAK,CAACG,KAAvE;AAEAH,UAAAA,KAAK,CAACI,IAAN,CAAWF,GAAX,IAAkBG,MAAM,CAACN,QAAD,EAAWG,GAAX,EAAgBJ,IAAI,CAACI,GAAD,CAApB,EAA2B,UAASI,KAAT,EAAgBC,MAAhB,EACnD;AACE;AACA;AACA,gBAAI,EAAEL,GAAG,IAAIF,KAAK,CAACI,IAAf,CAAJ,EACA;AACE;AACD,aANH,CAQE;;;AACA,mBAAOJ,KAAK,CAACI,IAAN,CAAWF,GAAX,CAAP;;AAEA,gBAAII,KAAJ,EACA;AACE;AACA;AACA;AACAV,cAAAA,KAAK,CAACI,KAAD,CAAL;AACD,aAND,MAQA;AACEA,cAAAA,KAAK,CAACQ,OAAN,CAAcN,GAAd,IAAqBK,MAArB;AACD,aArBH,CAuBE;;;AACAN,YAAAA,QAAQ,CAACK,KAAD,EAAQN,KAAK,CAACQ,OAAd,CAAR;AACD,WA1BuB,CAAxB;AA2BD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,iBAASH,MAAT,CAAgBN,QAAhB,EAA0BG,GAA1B,EAA+BO,IAA/B,EAAqCR,QAArC,EACA;AACE,cAAIS,OAAJ,CADF,CAGE;;AACA,cAAIX,QAAQ,CAACY,MAAT,IAAmB,CAAvB,EACA;AACED,YAAAA,OAAO,GAAGX,QAAQ,CAACU,IAAD,EAAOd,KAAK,CAACM,QAAD,CAAZ,CAAlB;AACD,WAHD,CAIA;AAJA,eAMA;AACES,YAAAA,OAAO,GAAGX,QAAQ,CAACU,IAAD,EAAOP,GAAP,EAAYP,KAAK,CAACM,QAAD,CAAjB,CAAlB;AACD;;AAED,iBAAOS,OAAP;AACD,SA9EyF,CAiF3F;;;AAEA,2BAAAE,WAAW,GAAGpB,MAAM,CAACF,OAArB;AAGC,OAtFD,EAsFG,OAAO;AACR,sBAAcL,IADN;AAER,sBAAcE;AAFN,OAAP,CAtFH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './async.js';\nimport { __cjsMetaURL as _req0} from './abort.js';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var async = require('./async.js')\n   , abort = require('./abort.js')\n   ;\n\n // API\n module.exports = iterate;\n\n /**\n  * Iterates over each job object\n  *\n  * @param {array|object} list - array or object (named list) to iterate over\n  * @param {function} iterator - iterator to run\n  * @param {object} state - current job status\n  * @param {function} callback - invoked when all elements processed\n  */\n function iterate(list, iterator, state, callback)\n {\n   // store current index\n   var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n   state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n   {\n     // don't repeat yourself\n     // skip secondary callbacks\n     if (!(key in state.jobs))\n     {\n       return;\n     }\n\n     // clean up jobs\n     delete state.jobs[key];\n\n     if (error)\n     {\n       // don't process rest of the results\n       // stop still active jobs\n       // and reset the list\n       abort(state);\n     }\n     else\n     {\n       state.results[key] = output;\n     }\n\n     // return salvaged results\n     callback(error, state.results);\n   });\n }\n\n /**\n  * Runs iterator over provided job element\n  *\n  * @param   {function} iterator - iterator to invoke\n  * @param   {string|number} key - key/index of the element in the list of jobs\n  * @param   {mixed} item - job description\n  * @param   {function} callback - invoked after iterator is done with the job\n  * @returns {function|mixed} - job abort function or something else\n  */\n function runJob(iterator, key, item, callback)\n {\n   var aborter;\n\n   // allow shortcut if iterator expects only two arguments\n   if (iterator.length == 2)\n   {\n     aborter = iterator(item, async(callback));\n   }\n   // otherwise go with full three arguments\n   else\n   {\n     aborter = iterator(item, key, async(callback));\n   }\n\n   return aborter;\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './async.js': _req,\n  './abort.js': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}