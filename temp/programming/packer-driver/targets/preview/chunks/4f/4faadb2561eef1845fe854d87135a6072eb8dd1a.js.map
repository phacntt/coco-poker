{"version":3,"sources":["file:///Users/apple/Documents/Dads/coco-poker/node_modules/mime-types/index.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","db","extname","EXTRACT_TYPE_REGEXP","TEXT_TYPE_REGEXP","charset","charsets","lookup","contentType","extension","extensions","Object","create","types","populateMaps","type","match","exec","mime","toLowerCase","test","str","indexOf","exts","length","path","substr","preference","undefined","keys","forEach","forEachMimeType","i","from","source","to","_cjsExports","_charset","_charsets","_contentType","_extension","_extensions","_lookup","_types"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'mime-db';\nimport { __cjsMetaURL as _req0} from 'path';\nlet _cjsExports;\nlet _charset;\nlet _charsets;\nlet _contentType;\nlet _extension;\nlet _extensions;\nlet _lookup;\nlet _types;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n /*!\n  * mime-types\n  * Copyright(c) 2014 Jonathan Ong\n  * Copyright(c) 2015 Douglas Christopher Wilson\n  * MIT Licensed\n  */\n\n 'use strict'\n\n /**\n  * Module dependencies.\n  * @private\n  */\n\n var db = require('mime-db')\n var extname = require('path').extname\n\n /**\n  * Module variables.\n  * @private\n  */\n\n var EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\n var TEXT_TYPE_REGEXP = /^text\\//i\n\n /**\n  * Module exports.\n  * @public\n  */\n\n exports.charset = charset\n exports.charsets = { lookup: charset }\n exports.contentType = contentType\n exports.extension = extension\n exports.extensions = Object.create(null)\n exports.lookup = lookup\n exports.types = Object.create(null)\n\n // Populate the extensions/types maps\n populateMaps(exports.extensions, exports.types)\n\n /**\n  * Get the default charset for a MIME type.\n  *\n  * @param {string} type\n  * @return {boolean|string}\n  */\n\n function charset (type) {\n   if (!type || typeof type !== 'string') {\n     return false\n   }\n\n   // TODO: use media-typer\n   var match = EXTRACT_TYPE_REGEXP.exec(type)\n   var mime = match && db[match[1].toLowerCase()]\n\n   if (mime && mime.charset) {\n     return mime.charset\n   }\n\n   // default text/* to utf-8\n   if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n     return 'UTF-8'\n   }\n\n   return false\n }\n\n /**\n  * Create a full Content-Type header given a MIME type or extension.\n  *\n  * @param {string} str\n  * @return {boolean|string}\n  */\n\n function contentType (str) {\n   // TODO: should this even be in this module?\n   if (!str || typeof str !== 'string') {\n     return false\n   }\n\n   var mime = str.indexOf('/') === -1\n     ? exports.lookup(str)\n     : str\n\n   if (!mime) {\n     return false\n   }\n\n   // TODO: use content-type or other module\n   if (mime.indexOf('charset') === -1) {\n     var charset = exports.charset(mime)\n     if (charset) mime += '; charset=' + charset.toLowerCase()\n   }\n\n   return mime\n }\n\n /**\n  * Get the default extension for a MIME type.\n  *\n  * @param {string} type\n  * @return {boolean|string}\n  */\n\n function extension (type) {\n   if (!type || typeof type !== 'string') {\n     return false\n   }\n\n   // TODO: use media-typer\n   var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n   // get extensions\n   var exts = match && exports.extensions[match[1].toLowerCase()]\n\n   if (!exts || !exts.length) {\n     return false\n   }\n\n   return exts[0]\n }\n\n /**\n  * Lookup the MIME type for a file path/extension.\n  *\n  * @param {string} path\n  * @return {boolean|string}\n  */\n\n function lookup (path) {\n   if (!path || typeof path !== 'string') {\n     return false\n   }\n\n   // get the extension (\"ext\" or \".ext\" or full path)\n   var extension = extname('x.' + path)\n     .toLowerCase()\n     .substr(1)\n\n   if (!extension) {\n     return false\n   }\n\n   return exports.types[extension] || false\n }\n\n /**\n  * Populate the extensions and types maps.\n  * @private\n  */\n\n function populateMaps (extensions, types) {\n   // source preference (least -> most)\n   var preference = ['nginx', 'apache', undefined, 'iana']\n\n   Object.keys(db).forEach(function forEachMimeType (type) {\n     var mime = db[type]\n     var exts = mime.extensions\n\n     if (!exts || !exts.length) {\n       return\n     }\n\n     // mime -> extensions\n     extensions[type] = exts\n\n     // extension -> mime\n     for (var i = 0; i < exts.length; i++) {\n       var extension = exts[i]\n\n       if (types[extension]) {\n         var from = preference.indexOf(db[types[extension]].source)\n         var to = preference.indexOf(mime.source)\n\n         if (types[extension] !== 'application/octet-stream' &&\n           (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n           // skip the remapping\n           continue\n         }\n       }\n\n       // set the extension -> mime\n       types[extension] = type\n     }\n   })\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_charset = module.exports.charset;\n_charsets = module.exports.charsets;\n_contentType = module.exports.contentType;\n_extension = module.exports.extension;\n_extensions = module.exports.extensions;\n_lookup = module.exports.lookup;\n_types = module.exports.types;\n\n}, () => ({\n  'mime-db': _req,\n  'path': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}