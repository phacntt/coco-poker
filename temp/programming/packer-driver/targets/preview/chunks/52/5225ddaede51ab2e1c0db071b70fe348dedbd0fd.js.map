{"version":3,"sources":["file:///Users/apple/Documents/Dads/coco-poker/node_modules/asynckit/parallel.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","url","define","exports","require","module","__filename","__dirname","iterate","initState","terminator","parallel","list","iterator","callback","state","index","length","error","result","Object","keys","jobs","results","bind","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;AACgBE,MAAAA,K,iBAAhBF,Y;;;8BAEHA,Y,GAAe,cAAYG,G;;AACjCL,MAAAA,UAAU,CAACM,MAAX,CAAkBJ,YAAlB,EAAgC,UAAUK,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,OAAO,GAAMJ,OAAO,CAAC,kBAAD,CAAxB;AAAA,YACIK,SAAS,GAAIL,OAAO,CAAC,gBAAD,CADxB;AAAA,YAEIM,UAAU,GAAGN,OAAO,CAAC,qBAAD,CAFxB,CAJ0F,CAS1F;;;AACAC,QAAAA,MAAM,CAACF,OAAP,GAAiBQ,QAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,iBAASA,QAAT,CAAkBC,IAAlB,EAAwBC,QAAxB,EAAkCC,QAAlC,EACA;AACE,cAAIC,KAAK,GAAGN,SAAS,CAACG,IAAD,CAArB;;AAEA,iBAAOG,KAAK,CAACC,KAAN,GAAc,CAACD,KAAK,CAAC,WAAD,CAAL,IAAsBH,IAAvB,EAA6BK,MAAlD,EACA;AACET,YAAAA,OAAO,CAACI,IAAD,EAAOC,QAAP,EAAiBE,KAAjB,EAAwB,UAASG,KAAT,EAAgBC,MAAhB,EAC/B;AACE,kBAAID,KAAJ,EACA;AACEJ,gBAAAA,QAAQ,CAACI,KAAD,EAAQC,MAAR,CAAR;AACA;AACD,eALH,CAOE;;;AACA,kBAAIC,MAAM,CAACC,IAAP,CAAYN,KAAK,CAACO,IAAlB,EAAwBL,MAAxB,KAAmC,CAAvC,EACA;AACEH,gBAAAA,QAAQ,CAAC,IAAD,EAAOC,KAAK,CAACQ,OAAb,CAAR;AACA;AACD;AACF,aAdM,CAAP;AAgBAR,YAAAA,KAAK,CAACC,KAAN;AACD;;AAED,iBAAON,UAAU,CAACc,IAAX,CAAgBT,KAAhB,EAAuBD,QAAvB,CAAP;AACD,SA9CyF,CAiD3F;;;AAEA,2BAAAW,WAAW,GAAGpB,MAAM,CAACF,OAArB;AAGC,OAtDD,EAsDG,OAAO;AACR,4BAAoBN,IADZ;AAER,0BAAkBE,KAFV;AAGR,+BAAuBC;AAHf,OAAP,CAtDH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './lib/iterate.js';\nimport { __cjsMetaURL as _req0} from './lib/state.js';\nimport { __cjsMetaURL as _req1} from './lib/terminator.js';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var iterate    = require('./lib/iterate.js')\n   , initState  = require('./lib/state.js')\n   , terminator = require('./lib/terminator.js')\n   ;\n\n // Public API\n module.exports = parallel;\n\n /**\n  * Runs iterator over provided array elements in parallel\n  *\n  * @param   {array|object} list - array or object (named list) to iterate over\n  * @param   {function} iterator - iterator to run\n  * @param   {function} callback - invoked when all elements processed\n  * @returns {function} - jobs terminator\n  */\n function parallel(list, iterator, callback)\n {\n   var state = initState(list);\n\n   while (state.index < (state['keyedList'] || list).length)\n   {\n     iterate(list, iterator, state, function(error, result)\n     {\n       if (error)\n       {\n         callback(error, result);\n         return;\n       }\n\n       // looks like it's the last one\n       if (Object.keys(state.jobs).length === 0)\n       {\n         callback(null, state.results);\n         return;\n       }\n     });\n\n     state.index++;\n   }\n\n   return terminator.bind(state, callback);\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './lib/iterate.js': _req,\n  './lib/state.js': _req0,\n  './lib/terminator.js': _req1,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}