{"version":3,"sources":["file:///Users/apple/Documents/Dads/coco-poker/node_modules/axios/lib/helpers/isURLSameOrigin.js"],"names":["utils","platform","isStandardBrowserEnv","standardBrowserEnv","msie","test","navigator","userAgent","urlParsingNode","document","createElement","originURL","resolveURL","url","href","setAttribute","protocol","replace","host","search","hash","hostname","port","pathname","charAt","window","location","isURLSameOrigin","requestURL","parsed","isString","nonStandardBrowserEnv"],"mappings":"AAAA;;;;;;;;AAEOA,MAAAA,K;;AACAC,MAAAA,Q;;;yBAEQA,QAAQ,CAACC,oBAAT,GAEf;AACA;AACG,eAASC,kBAAT,GAA8B;AAC7B,cAAMC,IAAI,GAAG,kBAAkBC,IAAlB,CAAuBC,SAAS,CAACC,SAAjC,CAAb;AACA,cAAMC,cAAc,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAvB;AACA,YAAIC,SAAJ;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,iBAASC,UAAT,CAAoBC,GAApB,EAAyB;AACvB,cAAIC,IAAI,GAAGD,GAAX;;AAEA,cAAIT,IAAJ,EAAU;AACR;AACAI,YAAAA,cAAc,CAACO,YAAf,CAA4B,MAA5B,EAAoCD,IAApC;AACAA,YAAAA,IAAI,GAAGN,cAAc,CAACM,IAAtB;AACD;;AAEDN,UAAAA,cAAc,CAACO,YAAf,CAA4B,MAA5B,EAAoCD,IAApC,EATuB,CAWvB;;AACA,iBAAO;AACLA,YAAAA,IAAI,EAAEN,cAAc,CAACM,IADhB;AAELE,YAAAA,QAAQ,EAAER,cAAc,CAACQ,QAAf,GAA0BR,cAAc,CAACQ,QAAf,CAAwBC,OAAxB,CAAgC,IAAhC,EAAsC,EAAtC,CAA1B,GAAsE,EAF3E;AAGLC,YAAAA,IAAI,EAAEV,cAAc,CAACU,IAHhB;AAILC,YAAAA,MAAM,EAAEX,cAAc,CAACW,MAAf,GAAwBX,cAAc,CAACW,MAAf,CAAsBF,OAAtB,CAA8B,KAA9B,EAAqC,EAArC,CAAxB,GAAmE,EAJtE;AAKLG,YAAAA,IAAI,EAAEZ,cAAc,CAACY,IAAf,GAAsBZ,cAAc,CAACY,IAAf,CAAoBH,OAApB,CAA4B,IAA5B,EAAkC,EAAlC,CAAtB,GAA8D,EAL/D;AAMLI,YAAAA,QAAQ,EAAEb,cAAc,CAACa,QANpB;AAOLC,YAAAA,IAAI,EAAEd,cAAc,CAACc,IAPhB;AAQLC,YAAAA,QAAQ,EAAGf,cAAc,CAACe,QAAf,CAAwBC,MAAxB,CAA+B,CAA/B,MAAsC,GAAvC,GACRhB,cAAc,CAACe,QADP,GAER,MAAMf,cAAc,CAACe;AAVlB,WAAP;AAYD;;AAEDZ,QAAAA,SAAS,GAAGC,UAAU,CAACa,MAAM,CAACC,QAAP,CAAgBZ,IAAjB,CAAtB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,eAAO,SAASa,eAAT,CAAyBC,UAAzB,EAAqC;AAC1C,gBAAMC,MAAM,GAAI7B,KAAK,CAAC8B,QAAN,CAAeF,UAAf,CAAD,GAA+BhB,UAAU,CAACgB,UAAD,CAAzC,GAAwDA,UAAvE;AACA,iBAAQC,MAAM,CAACb,QAAP,KAAoBL,SAAS,CAACK,QAA9B,IACJa,MAAM,CAACX,IAAP,KAAgBP,SAAS,CAACO,IAD9B;AAED,SAJD;AAKD,OAlDD,EAJa,GAwDb;AACC,eAASa,qBAAT,GAAiC;AAChC,eAAO,SAASJ,eAAT,GAA2B;AAChC,iBAAO,IAAP;AACD,SAFD;AAGD,OAJD,E","sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n"]}