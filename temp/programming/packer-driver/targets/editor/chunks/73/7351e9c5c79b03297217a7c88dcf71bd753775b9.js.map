{"version":3,"sources":["file:///Users/apple/Documents/Dads/coco-poker/node_modules/axios/lib/helpers/formDataToStream.js"],"names":["FormDataPart","TextEncoder","Readable","utils","readBlob","BOUNDARY_ALPHABET","ALPHABET","ALPHA_DIGIT","textEncoder","CRLF","CRLF_BYTES","encode","CRLF_BYTES_COUNT","constructor","name","value","escapeName","isStringValue","isString","headers","String","replace","type","contentLength","byteLength","size","isTypedArray","match","formDataToStream","form","headersHandler","options","tag","boundary","generateString","isFormData","TypeError","length","Error","boundaryBytes","footerBytes","parts","Array","from","entries","map","part","toFiniteNumber","computedHeaders","Number","isFinite"],"mappings":"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","sourcesContent":["import {TextEncoder} from 'util';\nimport {Readable} from 'stream';\nimport utils from \"../utils.js\";\nimport readBlob from \"./readBlob.js\";\n\nconst BOUNDARY_ALPHABET = utils.ALPHABET.ALPHA_DIGIT + '-_';\n\nconst textEncoder = new TextEncoder();\n\nconst CRLF = '\\r\\n';\nconst CRLF_BYTES = textEncoder.encode(CRLF);\nconst CRLF_BYTES_COUNT = 2;\n\nclass FormDataPart {\n  constructor(name, value) {\n    const {escapeName} = this.constructor;\n    const isStringValue = utils.isString(value);\n\n    let headers = `Content-Disposition: form-data; name=\"${escapeName(name)}\"${\n      !isStringValue && value.name ? `; filename=\"${escapeName(value.name)}\"` : ''\n    }${CRLF}`;\n\n    if (isStringValue) {\n      value = textEncoder.encode(String(value).replace(/\\r?\\n|\\r\\n?/g, CRLF));\n    } else {\n      headers += `Content-Type: ${value.type || \"application/octet-stream\"}${CRLF}`\n    }\n\n    this.headers = textEncoder.encode(headers + CRLF);\n\n    this.contentLength = isStringValue ? value.byteLength : value.size;\n\n    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;\n\n    this.name = name;\n    this.value = value;\n  }\n\n  async *encode(){\n    yield this.headers;\n\n    const {value} = this;\n\n    if(utils.isTypedArray(value)) {\n      yield value;\n    } else {\n      yield* readBlob(value);\n    }\n\n    yield CRLF_BYTES;\n  }\n\n  static escapeName(name) {\n      return String(name).replace(/[\\r\\n\"]/g, (match) => ({\n        '\\r' : '%0D',\n        '\\n' : '%0A',\n        '\"' : '%22',\n      }[match]));\n  }\n}\n\nconst formDataToStream = (form, headersHandler, options) => {\n  const {\n    tag = 'form-data-boundary',\n    size = 25,\n    boundary = tag + '-' + utils.generateString(size, BOUNDARY_ALPHABET)\n  } = options || {};\n\n  if(!utils.isFormData(form)) {\n    throw TypeError('FormData instance required');\n  }\n\n  if (boundary.length < 1 || boundary.length > 70) {\n    throw Error('boundary must be 10-70 characters long')\n  }\n\n  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);\n  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);\n  let contentLength = footerBytes.byteLength;\n\n  const parts = Array.from(form.entries()).map(([name, value]) => {\n    const part = new FormDataPart(name, value);\n    contentLength += part.size;\n    return part;\n  });\n\n  contentLength += boundaryBytes.byteLength * parts.length;\n\n  contentLength = utils.toFiniteNumber(contentLength);\n\n  const computedHeaders = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`\n  }\n\n  if (Number.isFinite(contentLength)) {\n    computedHeaders['Content-Length'] = contentLength;\n  }\n\n  headersHandler && headersHandler(computedHeaders);\n\n  return Readable.from((async function *() {\n    for(const part of parts) {\n      yield boundaryBytes;\n      yield* part.encode();\n    }\n\n    yield footerBytes;\n  })());\n};\n\nexport default formDataToStream;\n"]}